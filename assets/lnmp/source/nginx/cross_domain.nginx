# 跨域请求没有单独文件，按需写入对应站点的 location 区块
# ====== 设置跨域配置 Start ====== #

# $http_origin 读取的是请求头header中 origin 的值
if ($http_origin ~* "^(?:http|https)://api\.example\.com$"){
    # 该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。
    add_header Access-Control-Allow-Origin $http_origin always;

    # 该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。
    # 注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。
    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS always;

    # 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。
    # 默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。
    # 这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。
    add_header Access-Control-Allow-Credentials true always;

    # 如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。
    # 它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。
    add_header Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-auth-token always;

    # 该字段可选，用来指定本次预检请求的有效期，单位为秒。
    # 下面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。
    add_header Access-Control-Max-Age 1728000 always;

    # 预检请求处理
    if ($request_method = OPTIONS) {
        return 204;
    }
}

# ====== 设置跨域配置 End  ====== #
